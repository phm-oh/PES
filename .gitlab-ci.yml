stages: [test, build, deploy]

# ===== Global variables =====
variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"
  IMAGE_TAG: "${CI_COMMIT_SHORT_SHA}"
  BACKEND_IMAGE: "${CI_REGISTRY_IMAGE}/backend:${IMAGE_TAG}"
  FRONTEND_IMAGE: "${CI_REGISTRY_IMAGE}/frontend:${IMAGE_TAG}"

  # === Deploy target (Production) ===
  DEPLOY_HOST: "172.16.3.105"
  DEPLOY_PORT: "22"
  DEPLOY_USER: "ubuntu"            # <-- ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
  DEPLOY_PATH: "/opt/skill_test_v2"

default:
  tags: [docker]                   # ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Runner ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend/node_modules
      - backend/node_modules

# ===== TEST =====
test_backend:
  stage: test
  image: node:20-alpine
  script:
    - cd backend
    - npm ci
    - npm run lint --if-present
    - npm test --if-present
  rules:
    - changes: [ "backend/**" ]
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

test_frontend:
  stage: test
  image: node:20-alpine
  script:
    - cd frontend
    - npm ci
    - npm run lint --if-present
    - npm test --if-present
  rules:
    - changes: [ "frontend/**" ]
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"

# ===== BUILD & PUSH (Docker-in-Docker) =====
.build_template:
  image: docker:26
  services:
    - docker:26-dind
  before_script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin

build_backend:
  stage: build
  extends: .build_template
  needs: ["test_backend"]
  script:
    - docker build -t "$BACKEND_IMAGE" ./backend
    - docker push "$BACKEND_IMAGE"
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag "$BACKEND_IMAGE" "${CI_REGISTRY_IMAGE}/backend:latest"
        docker push "${CI_REGISTRY_IMAGE}/backend:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      changes: [ "backend/**" ]

build_frontend:
  stage: build
  extends: .build_template
  needs: ["test_frontend"]
  script:
    - docker build -t "$FRONTEND_IMAGE" ./frontend
    - docker push "$FRONTEND_IMAGE"
    - |
      if [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag "$FRONTEND_IMAGE" "${CI_REGISTRY_IMAGE}/frontend:latest"
        docker push "${CI_REGISTRY_IMAGE}/frontend:latest"
      fi
  rules:
    - if: $CI_COMMIT_BRANCH
      changes: [ "frontend/**" ]

# ===== DEPLOY (SSH to 172.16.3.105 with docker compose) =====
deploy_prod:
  stage: deploy
  image: alpine:3.20
  needs: ["build_backend", "build_frontend"]
  environment:
    name: production
    url: http://$DEPLOY_HOST:3000
    on_stop: stop_prod
  before_script:
    - apk add --no-cache openssh-client rsync bash
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$DEPLOY_PRIV_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - |
      # ‡πÄ‡∏û‡∏¥‡πà‡∏° fingerprint ‡∏Ç‡∏≠‡∏á‡πÇ‡∏Æ‡∏™‡∏ï‡πå (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô MITM)
      ssh-keyscan -p "${DEPLOY_PORT}" "$DEPLOY_HOST" >> ~/.ssh/known_hosts || true
    - export REMOTE_DIR="${DEPLOY_PATH}"
  script:
    # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    - ssh -p "$DEPLOY_PORT" -i ~/.ssh/id_ed25519 "${DEPLOY_USER}@${DEPLOY_HOST}" "sudo mkdir -p $REMOTE_DIR/deploy && sudo chown -R \$USER:\$USER $REMOTE_DIR"

    # ‡∏™‡πà‡∏á compose ‡πÅ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á
    - rsync -avz -e "ssh -p ${DEPLOY_PORT} -i ~/.ssh/id_ed25519" docker-compose.prod.yml "${DEPLOY_USER}@${DEPLOY_HOST}:$REMOTE_DIR/"
    - rsync -avz -e "ssh -p ${DEPLOY_PORT} -i ~/.ssh/id_ed25519" deploy/ "${DEPLOY_USER}@${DEPLOY_HOST}:$REMOTE_DIR/deploy/"

    # ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô registry ‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏†‡∏≤‡∏û private)
    - ssh -p "$DEPLOY_PORT" -i ~/.ssh/id_ed25519 "${DEPLOY_USER}@${DEPLOY_HOST}" "echo \"$CI_REGISTRY_PASSWORD\" | docker login -u \"$CI_REGISTRY_USER\" \"$CI_REGISTRY\" --password-stdin"

    # ‡∏î‡∏∂‡∏á‡∏≠‡∏¥‡∏°‡πÄ‡∏°‡∏à tag ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
    - >
      ssh -p "$DEPLOY_PORT" -i ~/.ssh/id_ed25519 "${DEPLOY_USER}@${DEPLOY_HOST}"
      "cd $REMOTE_DIR &&
       IMAGE_TAG='${IMAGE_TAG}' NUXT_PUBLIC_API_BASE='http://localhost:7000'
       docker compose -f docker-compose.prod.yml pull &&
       IMAGE_TAG='${IMAGE_TAG}' NUXT_PUBLIC_API_BASE='http://localhost:7000'
       docker compose -f docker-compose.prod.yml up -d --remove-orphans"
  rules:
    # deploy ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ branch main ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô Manual (‡∏Å‡∏±‡∏ô‡∏û‡∏•‡∏≤‡∏î)
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: manual
      allow_failure: false

# ===== STOP Production (optional) =====
stop_prod:
  stage: deploy
  image: alpine:3.20
  environment:
    name: production
    action: stop
  before_script:
    - apk add --no-cache openssh-client
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo "$DEPLOY_PRIV_KEY" > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-keyscan -p "${DEPLOY_PORT}" "$DEPLOY_HOST" >> ~/.ssh/known_hosts || true
  script:
    - ssh -p "$DEPLOY_PORT" -i ~/.ssh/id_ed25519 "${DEPLOY_USER}@${DEPLOY_HOST}" "cd ${DEPLOY_PATH} && docker compose -f docker-compose.prod.yml down"
  rules:
    - when: manual
      allow_failure: true

# =======================================================
# ‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏Å‡∏î Deploy

# 1.GitLab Variables (Settings ‚Üí CI/CD ‚Üí Variables, ‡∏ó‡∏≥‡πÄ‡∏õ‡πá‡∏ô protected):

# - DEPLOY_PRIV_KEY = SSH private key (ed25519) ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏ô 172.16.3.105

# - (‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß) CI_REGISTRY_USER, CI_REGISTRY_PASSWORD ‡∏à‡∏≤‡∏Å GitLab

# - ‡∏ñ‡πâ‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡∏û‡∏≠‡∏£‡πå‡∏ï/‡∏û‡∏≤‡∏ò‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ ‡πÉ‡∏´‡πâ override DEPLOY_USER, DEPLOY_PORT, DEPLOY_PATH

# 2.‡∏ö‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 172.16.3.105

# - ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Docker + Docker Compose plugin ‡πÅ‡∏•‡πâ‡∏ß

# - ‡πÄ‡∏û‡∏¥‡πà‡∏° public key (‡∏Ñ‡∏π‡πà‡∏Å‡∏±‡∏ö DEPLOY_PRIV_KEY) ‡πÉ‡∏ô ~/.ssh/authorized_keys ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ DEPLOY_USER

# - ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå /opt/skill_test_v2 ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

# 3.‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏µ‡πÇ‡∏õ

# - docker-compose.prod.yml ‡∏≠‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏≠‡∏¥‡∏°‡πÄ‡∏°‡∏à ${CI_REGISTRY_IMAGE}/backend:${IMAGE_TAG} ‡πÅ‡∏•‡∏∞ ${CI_REGISTRY_IMAGE}/frontend:${IMAGE_TAG}

# - ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå deploy/ ‡πÉ‡∏™‡πà‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á backend.env (DB/JWT/CORS), ‡∏Ø‡∏•‡∏Ø ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏ô Production

# - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö: push ‡πÄ‡∏Ç‡πâ‡∏≤ main ‚Üí ‡πÑ‡∏õ‡∏ó‡∏µ‡πà Pipelines ‚Üí deploy_prod (manual) ‚Üí ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞ rsync ‡πÑ‡∏ü‡∏•‡πå, login registry, pull & up -d ‡∏ö‡∏ô 172.16.3.105 ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏¢ üöÄ